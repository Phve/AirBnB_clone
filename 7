#!/usr/bin/env python3
"""This script defines the HBNB console."""

import cmd
import re
from shlex import split
from models import storage
from models.base_model import BaseModel
from models.user import User
from models.state import State
from models.city import City
from models.place import Place
from models.amenity import Amenity
from models.review import Review


def parse_arguments(arguments):
    """Parse the command-line arguments."""
    curly_braces_match = re.search(r"\{(.*?)\}", arguments)
    brackets_match = re.search(r"\[(.*?)\]", arguments)

    if curly_braces_match is None:
        if brackets_match is None:
            return [i.strip(",") for i in split(arguments)]
        else:
            lexer = split(arguments[:brackets_match.span()[0]])
            result_list = [i.strip(",") for i in lexer]
            result_list.append(brackets_match.group())
            return result_list
    else:
        lexer = split(arguments[:curly_braces_match.span()[0]])
        result_list = [i.strip(",") for i in lexer]
        result_list.append(curly_braces_match.group())
    
    return result_list


class HBNBCommand(cmd.Cmd):
    """Class for the HBNB command interpreter."""

    prompt = "(hbnb) "
    valid_classes = {
        "BaseModel",
        "User",
        "State",
        "City",
        "Place",
        "Amenity",
        "Review"
    }

    def emptyline(self):
        """Do nothing upon receiving an empty line."""
        pass

    def do_quit(self, arg):
        """Quit command to exit the program"""
        return True

    def do_EOF(self, arg):
        """Exit the program when end-of-file (EOF) signal is received"""
        print()
        return True

    def emptyline(self):
        """Do nothing when an empty line is entered"""
        pass

    def do_create(self, arg):
        """Create a new instance of a specified class"""
        args = arg.split()
        if not args:
            print("** class name missing **")
            return
        class_name = args[0]
        if class_name not in self.valid_classes:
            print("** class doesn't exist **")
            return
        new_instance = storage.classes[class_name]()
        new_instance.save()
        print(new_instance.id)
    
    def show(self, arg):
        """Print the string representation of an instance"""
        args = arg.split()
        if not args:
            print("** class name missing **")
            return
        class_name = args[0]
        if class_name not in {BaseModel, User, State, City, Place, Amenity, Review}:
            print("** class doesn't exist **")
            return
        if len(args) < 2:
            print("** instance id missing **")
            return
        instance_id = args[1]
        key = "{}.{}".format(class_name, instance_id)
        objects = models.storage.all()
        if key not in objects:
            print("** no instance found **")
            return
        print(objects[key])

    def destroy(self, arg):
        """Delete an instance based on the class name and id"""
        args = arg.split()
        if not args:
            print("** class name missing **")
            return
        class_name = args[0]
        if class_name not in {BaseModel, User, State, City, Place, Amenity, Review}:
            print("** class doesn't exist **")
            return
        if len(args) < 2:
            print("** instance id missing **")
            return
        instance_id = args[1]
        key = "{}.{}".format(class_name, instance_id)
        objects = models.storage.all()
        if key not in objects:
            print("** no instance found **")
            return
        objects.pop(key)
        models.storage.save()
    
    def do_all(self, arg):
        """Print string representations of all instances"""
        args = arg.split()
        if not args:
            print("** class name missing **")
            return
        class_name = args[0]
        if class_name not in self.valid_classes:
            print("** class doesn't exist **")
            return
        objects = storage.all()
        print([str(objects[key]) for key in objects if key.startswith(class_name)])

    def update(self, arg):
        """Update an instance based on the class name, id, attribute, and value"""
        args = arg.split()
        if not args:
            print("** class name missing **")
            return
        class_name = args[0]
        if class_name not in {BaseModel, User, State, City, Place, Amenity, Review}:
            print("** class doesn't exist **")
            return
        if len(args) < 2:
            print("** instance id missing **")
            return
        instance_id = args[1]
        key = "{}.{}".format(class_name, instance_id)
        objects = models.storage.all()
        if key not in objects:
            print("** no instance found **")
            return
        if len(args) < 3:
            print("** attribute name missing **")
            return
        if len(args) < 4:
            print("** value missing **")
            return
        attribute_name = args[2]
        attribute_value = args[3]
        instance = objects[key]
        setattr(instance, attribute_name, attribute_value)
        instance.save()

def default(self, arguments):
    """Default behavior for cmd module when input is invalid."""
    arg_dict = {
        "all": self.do_all,
        "show": self.show,
        "destroy": self.destroy,
        "update": self.update
    }

    match = re.search(r"\.", arguments)
    if match is not None:
        arg_list = [arguments[:match.span()[0]], arguments[match.span()[1]:]]
        match = re.search(r"\((.*?)\)", arg_list[1])
        if match is not None:
            command = [arg_list[1][:match.span()[0]], match.group()[1:-1]]
            if command[0] in arg_dict.keys():
                call = "{} {}".format(arg_list[0], command[1])
                return arg_dict[command[0]](call)

    print("*** Unknown syntax: {}".format(arguments))
    return False


if __name__ == "__main__":
    HBNBCommand().cmdloop()


